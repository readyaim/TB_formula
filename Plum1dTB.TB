//------------------------------------------------------------------------
// 简称: Plum1dTB (Trading for Turlte) 
// 名称: 1day 海龟交易系统
// 类别: 公式应用
// 类型: 内建应用
//------------------------------------------------------------------------
//Change List:
//V04: exit at first exitprice when using close, fix a bug on stop; add ExitAtClose/Peak option
//V03: modify riskdegree (adding close[1]+freezed), modify max risk degree=55%, modify exitallowed
//V02: remove TurtlePos cond in marketPosition==0
//V01: Change name to Plum1dTB
//V16_tmp2: add exit&entry at the same day
//V15: add EntryDirection Control
//V14: update default params (2N stop,3 units max, 70% risk degree)
//------------------------------------------------------------------------
Params
	Numeric RiskRatio(1);				   // % Risk Per N ( 0 - 100)
	Numeric ATRLength(20);				  // 平均波动周期 ATR Length
	Numeric boLength(20);				   // 短周期 BreakOut Length
	Numeric fsLength(55);				   // 长周期 FailSafe Length
	Numeric teLength(10);				   // 离市周期 Trailing Exit Length
	Bool LastProfitableTradeFilter(False);   // 使用入市过滤条件. True=使能入市过滤；False=关闭入市过滤
	Numeric StopLossPara(2);				   // 止损系数 2=2N止损；1=1N止损
	Numeric MaxTurtlePosAllowed(3);				   // 最大持仓单位数 4=4个海龟单位；1=1个海龟单位
	Numeric DefaultTurtlePos(1);				   // 默认1海龟单位开仓数量。0=RiskRatio%风险资金计算开仓数量；1=海龟单位1手；2=海龟单位2手
	Numeric MaxRiskDegreeAllowed(55);				//最大允许的风险度55%	
	Numeric StopProfitPoint(0);					 //使能止损。True=使能止盈；False=关闭止盈
	Numeric EntryDirection(0);						//0= Both direction; 1=Long Only; -1=Short Only
	Bool ExitAtClose(True);						//True=exit at close; False=exit at High/Low
	Bool EnableStopFollowExit(True);			//True=Follow TurtleStopPrice to ExitL/HPrice when breakout
Vars
	Numeric MinPoint;					   // 最小变动单位
	NumericSeries AvgTR;					// ATR
	Numeric N;							  // N 值
	Numeric TotalEquity;					// 按最新收盘价计算出的总资产
	Numeric TurtleUnits;					// 交易单位
	
	NumericSeries DonchianHi;				  // 唐奇安通道上轨，延后1个Bar
	NumericSeries DonchianLo;				  // 唐奇安通道下轨，延后1个Bar
	NumericSeries fsDonchianHi;				// 唐奇安通道上轨，延后1个Bar，长周期
	NumericSeries fsDonchianLo;				// 唐奇安通道下轨，延后1个Bar，长周期
	Numeric ExitHighestPrice;			   // 离市时判断需要的N周期最高价
	Numeric ExitLowestPrice;				// 离市时判断需要的N周期最低价
	Numeric myEntryPrice;				   // 开仓价格
	Numeric myExitPrice;					// 平仓价格
	NumericSeries TurtleStopPrice;					// 海龟止损位
	NumericSeries preEntryPrice(0);		   // 前一次开仓的价格
	Bool SendOrderThisBar(False);			  // 当前Bar有过交易
	BoolSeries PreBreakoutFailure(false);	// 前一次突破是否失败
	Bool ExitAllowed(False);						//是否可以平仓。True=可以平仓/止损；False=不可以平仓/止损; 每天时间14：55-14:59 =True，其他时间=False
	Bool EntryAllowed(False);						//是否可以开仓。True=可以开仓；False=不可以开仓; 如果风险度小于MaxRiskDegreeAllowed，则=true; 否则=false
	Numeric	RiskDegree;					//Risk degree
	NumericSeries TurtlePos(0);					  //当前持有的海龟单位数量，应小于MaxTurtlePosAllowed
Begin
	If(BarStatus == 0)
	{
		preEntryPrice = InvalidNumeric;
		PreBreakoutFailure = false;
	}	
	// 集合竞价和小节休息过滤
	If(!CallAuctionFilter()) Return;
		 
	MinPoint = MinMove*PriceScale;	  //MinMove=最小变动价位(一跳的点数)/PriceScale
	AvgTR = XAverage(TrueRange,ATRLength);
	N = AvgTR[1];	
		
	TotalEquity = A_CurrentEquity();
	RiskDegree = (A_TotalMargin()+A_TotalFreeze()+Close)/A_CurrentEquity();		// (当前保证金+当前价格+冻结资金)/权益，=“再买入一笔“后的风险度
	
	//根据时间判断是否可以平仓
	ExitAllowed=False;
	if (BarStatus!=2) 
	{	//Test for history data
		ExitAllowed=True;
		TotalEquity = Portfolio_CurrentCapital() + Portfolio_UsedMargin();
		RiskDegree = (Portfolio_UsedMargin()+Close[1])/(Portfolio_UsedMargin()+Portfolio_CurrentCapital());
	}
	Else
	{	
		//实盘: 14:58分后可以平仓
		if (CurrentTime >= 0.1458 && CurrentTime <= 0.145999)	//day Bar, exit at close
			ExitAllowed=True;
		Else
			ExitAllowed=False;
	}
	//Caculate Risk Degree
	if ( RiskDegree*100<=MaxRiskDegreeAllowed )
		EntryAllowed=True;
	Else
		EntryAllowed=False;

	TurtleUnits = (TotalEquity*RiskRatio/100) /(N * ContractUnit()*BigPointValue());
	TurtleUnits = IIF(IntPart(TurtleUnits)==0, 1, IntPart(TurtleUnits));		//最小单位是1手，其余截断取整.
	TurtleUnits = IIF(DefaultTurtlePos==0, TurtleUnits, DefaultTurtlePos);

	DonchianHi = HighestFC(High[1],boLength);
	DonchianLo = LowestFC(Low[1],boLength);

	fsDonchianHi = HighestFC(High[1],fsLength);
	fsDonchianLo = LowestFC(Low[1],fsLength);

	ExitLowestPrice = LowestFC(Low[1],teLength);
	ExitHighestPrice = HighestFC(High[1],teLength);

	Commentary("N="+Text(N));
	Commentary("preEntryPrice="+Text(preEntryPrice));
	Commentary("PreBreakoutFailure="+IIFString(PreBreakoutFailure,"True","False"));
	
	// 当不使用过滤条件，或者使用过滤条件并且条件为PreBreakoutFailure为True进行后续操作
	If(MarketPosition == 0 && ((!LastProfitableTradeFilter) Or (PreBreakoutFailure)) )
	{	// 突破开仓, The 1st Pos.
		If (High > DonchianHi && TurtleUnits >= 1 && EntryAllowed)
		{   //开多，第一个仓位	
			// 开仓价格取突破上轨+一个价位和最高价之间的较小值，这样能更接近真实情况，并能尽量保证成交
			myEntryPrice = min(high,DonchianHi + MinPoint);
			myEntryPrice = IIF(myEntryPrice < Open, Open, myEntryPrice); // 大跳空的时候用开盘价代替。不成交时，使用交易助手帮助成交。
			preEntryPrice = myEntryPrice;
			if (EntryDirection==0 || EntryDirection==1)
				Buy(TurtleUnits,myEntryPrice);
			SendOrderThisBar = True;
			PreBreakoutFailure = False;
			TurtlePos=1;	//海龟单位初始仓位，1个单位
			TurtleStopPrice=myEntryPrice-StopLossPara * N;
		}
	   
		If(Low < DonchianLo && TurtleUnits >= 1 && EntryAllowed)
		{   //开空，第一个仓位	
			// 开仓价格取突破下轨-一个价位和最低价之间的较大值，这样能更接近真实情况，并能尽量保证成交
			myEntryPrice = max(low,DonchianLo - MinPoint);
			myEntryPrice = IIF(myEntryPrice > Open, Open, myEntryPrice); // 大跳空的时候用开盘价代替
			preEntryPrice = myEntryPrice;
			if (EntryDirection==0 || EntryDirection==-1)
				SellShort(TurtleUnits,myEntryPrice);
			SendOrderThisBar = True;
			PreBreakoutFailure = False;
			TurtlePos=1;	//海龟单位初始仓位，1个单位
			TurtleStopPrice=myEntryPrice+StopLossPara * N;
		}
	}

	// 长周期突破开仓 Failsafe Breakout point
	If(MarketPosition == 0)
	{
		//Commentary("fsDonchianHi="+Text(fsDonchianHi));
		If(TurtlePos==0 && High > fsDonchianHi && TurtleUnits >= 1 && EntryAllowed)
		{
			// 开仓价格取突破上轨+一个价位和最高价之间的较小值，这样能更接近真实情况，并能尽量保证成交
			myEntryPrice = min(high,fsDonchianHi + MinPoint);
			myEntryPrice = IIF(myEntryPrice < Open, Open, myEntryPrice); // 大跳空的时候用开盘价代替
			preEntryPrice = myEntryPrice;
			if (EntryDirection==0 || EntryDirection==1)
				Buy(TurtleUnits,myEntryPrice);
			SendOrderThisBar = True;
			PreBreakoutFailure = False;
			TurtlePos=1;	//海龟单位初始仓位，1个单位
			TurtleStopPrice=myEntryPrice-StopLossPara * N;
		}
		
		//Commentary("fsDonchianLo="+Text(fsDonchianLo));
		If(Low < fsDonchianLo && TurtleUnits >= 1 && EntryAllowed)
		{	// 开仓价格取突破下轨-一个价位和最低价之间的较大值，这样能更接近真实情况，并能尽量保证成交
			myEntryPrice = max(low,fsDonchianLo - MinPoint);
			myEntryPrice = IIF(myEntryPrice > Open, Open,myEntryPrice); // 大跳空的时候用开盘价代替
			preEntryPrice = myEntryPrice;
			if (EntryDirection==0 || EntryDirection==-1)
				SellShort(TurtleUnits,myEntryPrice);
			SendOrderThisBar = True;
			PreBreakoutFailure = False;
			TurtlePos=1;	//海龟单位初始仓位，1个单位
			TurtleStopPrice=myEntryPrice+StopLossPara * N;
		}
	}

	If(MarketPosition ==1) // 有多仓的情况: 加仓，止损，止盈
	{	   
		 //判断是否加多
		If(TurtlePos<MaxTurtlePosAllowed && preEntryPrice!=InvalidNumeric && TurtleUnits >= 1 && EntryAllowed)
		{
			If(Open >= preEntryPrice + 0.5*N && TurtlePos<MaxTurtlePosAllowed)	 //&& TurtlePos<=MaxTurtlePosAllowed can be deleted
			{   // 如果开盘就超过设定的1/2N && 没有满仓, 则直接用开盘价增仓。
				myEntryPrice = Open;
				preEntryPrice = myEntryPrice;
				Buy(TurtleUnits,myEntryPrice);
				SendOrderThisBar = True;
				TurtlePos=TurtlePos+1;	//海龟单位增1
				TurtleStopPrice=TurtleStopPrice+0.5 * N;
			}

			while(High >= preEntryPrice + 0.5*N && TurtlePos<MaxTurtlePosAllowed && EntryAllowed) 
			{   // 以最高价为标准，判断能进行几次增仓
				myEntryPrice = preEntryPrice + 0.5 * N;
				preEntryPrice = myEntryPrice;
				Buy(TurtleUnits,myEntryPrice);
				SendOrderThisBar = True;
				TurtlePos=TurtlePos+1;	//海龟单位增1
				TurtleStopPrice=TurtleStopPrice+0.5 * N;
			}
		}
		if (ExitAtClose==True)
		{	//Exit at Close
			//止损(多)指令, 需要修改成收盘价止损
			If(ExitAllowed && Close <= TurtleStopPrice && SendOrderThisBar == false) // 加仓Bar不止损
			{
				myExitPrice =  Close- 2*MinPoint;   //收盘价-2跳，确保成交
				Sell(0,myExitPrice); // 数量用0的情况下将全部平仓
				PreBreakoutFailure = True;
				TurtlePos=0;	 //海龟持仓单位数量清0
			}
			
			//Commentary("ExitLowestPrice="+Text(ExitLowestPrice));
			If(ExitAllowed && Close < ExitLowestPrice)
			{   //平多
				myExitPrice=Close-2*MinPoint;  //以收盘价平仓
				Sell(0,myExitPrice);	// 数量用0的情况下将全部平仓
				TurtlePos=0;	//海龟持仓单位清0
			}
		}else
		{	//Exit at Low
			// 止损(多)指令, 需要修改成收盘价止损
		   If(low <= TurtleStopPrice && SendOrderThisBar == false) // 加仓Bar不止损
			{
				myExitPrice =  max(low,TurtleStopPrice - 2*MinPoint);   //收盘价-2跳，确保成交
				myExitPrice = IIF(myExitPrice > Open, Open,myExitPrice); // 大跳空的时候用开盘价代替
				Sell(0,myExitPrice); // 数量用0的情况下将全部平仓
				PreBreakoutFailure = True;
				TurtlePos=0;	 //海龟持仓单位数量清0
			}
			
			//Commentary("ExitLowestPrice="+Text(ExitLowestPrice));
			If( low < ExitLowestPrice)
			{   //平多
				myExitPrice=max(low, ExitLowestPrice-2*MinPoint);  //以收盘价平仓
				myExitPrice = IIF(myExitPrice > Open, Open,myExitPrice); // 大跳空的时候用开盘价代替
				Sell(0,myExitPrice);	// 数量用0的情况下将全部平仓
				TurtlePos=0;	//海龟持仓单位清0
			}	
		}
		//Set TurtleStopPrice as ExitLowestPrice
		If(EnableStopFollowExit==True && ExitAtClose==True && low < ExitLowestPrice )									//20160708
		{   //Set TurtleStopPrice as ExitLowestPrice
			TurtleStopPrice=max(TurtleStopPrice,ExitLowestPrice);
		}
		
		//多单止盈
		if (StopProfitPoint !=0 && SendOrderThisBar == false && High>AvgEntryPrice()+StopProfitPoint*MinPoint)
		{   
			myExitPrice=myEntryPrice+StopProfitPoint*MinPoint;  
			If(Open > myExitPrice) myExitPrice = Open;	   // 如果该Bar开盘价即跳空触发，用开盘价代替
			Sell(0,myExitPrice);
			TurtlePos=0;	//海龟持仓单位清0
		}
		
		/*
		//价格突破L20时，平多开空
		if (!ExitAllowed && low>Donchianlo && SendOrderThisBar==false)
		{
			myEntryPrice = max(low,Donchianlo - 2* MinPoint);
			myEntryPrice = IIF(myEntryPrice > Open, Open, myEntryPrice); // 大跳空的时候用开盘价代替。不成交时，使用交易助手帮助成交。
			preEntryPrice = myEntryPrice;
			if (EntryDirection==0 || EntryDirection==-1)	//反手开空
				sellshort(TurtleUnits,myEntryPrice);
			SendOrderThisBar = True;
			PreBreakoutFailure = False;
			TurtlePos=1;	//海龟单位初始仓位，1个单位
			TurtleStopPrice=myEntryPrice-StopLossPara * N;
		}
		*/	
			
			
			
	}Else If(MarketPosition ==-1) // 有空仓的情况
	{
		//判断是否加空
		If(TurtlePos<MaxTurtlePosAllowed && preEntryPrice!=InvalidNumeric && TurtleUnits >= 1 && EntryAllowed)
		{   // 如果开盘就超过设定的1/2N && 没有满仓, 则直接用开盘价增仓。
			If(Open <= preEntryPrice - 0.5*N && TurtlePos<MaxTurtlePosAllowed ) 
			{   //加空，需修改成4个单位满仓
				myEntryPrice = Open;
				preEntryPrice = myEntryPrice;
				SellShort(TurtleUnits,myEntryPrice);
				SendOrderThisBar = True;
				TurtlePos=TurtlePos+1;	//海龟单位增1
				TurtleStopPrice=TurtleStopPrice-0.5 * N;
			}
			while(Low <= preEntryPrice - 0.5*N && TurtlePos<MaxTurtlePosAllowed && EntryAllowed) // 以最低价为标准，判断能进行几次增仓
			{
				myEntryPrice = preEntryPrice - 0.5 * N;
				preEntryPrice = myEntryPrice;
				SellShort(TurtleUnits,myEntryPrice);
				SendOrderThisBar = True;
				TurtlePos=TurtlePos+1;	//海龟单位增1
				TurtleStopPrice=TurtleStopPrice-0.5 * N;
			}
		}
		/*
		//价格突破H20时，平空开多
		if (!ExitAllowed && High>DonchianHi && SendOrderThisBar==false)
		{
			myEntryPrice = min(high,DonchianHi + MinPoint);
	        myEntryPrice = IIF(myEntryPrice < Open, Open, myEntryPrice); // 大跳空的时候用开盘价代替。不成交时，使用交易助手帮助成交。
			preEntryPrice = myEntryPrice;
			if (EntryDirection==0 || EntryDirection==1)
				Buy(TurtleUnits,myEntryPrice);	//反手开多。问题：被执行两次；解决：开仓数量减半.
			SendOrderThisBar = True;
			PreBreakoutFailure = False;
			TurtlePos=1;    //海龟单位初始仓位，1个单位
			TurtleStopPrice=myEntryPrice-StopLossPara * N;
		}
		*/
		if (ExitAtClose==True)
		{	//Exit at Close
			// 止损(空)指令, 需修改成收盘价止损
			If(ExitAllowed && Close >= TurtleStopPrice && SendOrderThisBar==false) // 加仓Bar不止损
			{   
				myExitPrice =  Close+ 2*MinPoint;   //收盘价+2跳，确保成交
				BuyToCover(0,myExitPrice); // 数量用0的情况下将全部平仓
				PreBreakoutFailure = True;
				TurtlePos=0;	//海龟持仓单位数量清0
			}
			// 求出持空仓时离市的条件比较值
			//Commentary("ExitHighestPrice="+Text(ExitHighestPrice));
			if (ExitAllowed && Close > ExitHighestPrice)
			{   //平空
				myExitPrice =  Close+ 2*MinPoint;   //收盘价-2跳，确保成交
				BuyToCover(0,myExitPrice);	// 数量用0的情况下将全部平仓
				TurtlePos=0;	//海龟持仓单位数量清0
			}
		}else
		{	//Exit at High/Low
			// 止损(空)指令, 需修改成收盘价止损
			If(High >= TurtleStopPrice && SendOrderThisBar==false) // 加仓Bar不止损
			{   
				myExitPrice =  min(High,TurtleStopPrice + 2*MinPoint);   //+2跳，确保成交
				myExitPrice = IIF(myExitPrice < Open, Open,myExitPrice); // 大跳空的时候用开盘价代替
				BuyToCover(0,myExitPrice); // 数量用0的情况下将全部平仓
				PreBreakoutFailure = True;
				TurtlePos=0;	//海龟持仓单位数量清0
			}
			// 求出持空仓时离市的条件比较值
			if (High > ExitHighestPrice)
			{   //平空
				myExitPrice =  min(High,ExitHighestPrice + 2*MinPoint);   //+2跳，确保成交
				myExitPrice = IIF(myExitPrice < Open, Open,myExitPrice); // 大跳空的时候用开盘价代替
				BuyToCover(0,myExitPrice);	// 数量用0的情况下将全部平仓
				TurtlePos=0;	//海龟持仓单位数量清0
			}	
		}
		//Set TurtleStopPrice as ExitLowestPrice
		If(EnableStopFollowExit==True && ExitAtClose==True && High > ExitHighestPrice)									//20160708
		{   //Set TurtleStopPrice as ExitLowestPrice
			TurtleStopPrice=min(TurtleStopPrice,ExitHighestPrice);
		}
		//空单止盈
		if (StopProfitPoint!=0 && SendOrderThisBar == false && High<AvgEntryPrice-StopProfitPoint*MinPoint)
		{   
			myExitPrice=myEntryPrice-StopProfitPoint*MinPoint;  
			If(Open < myExitPrice) myExitPrice = Open;	   // 如果该Bar开盘价即跳空触发，用开盘价代替
			BuyToCover(0,myExitPrice);	// 数量用0的情况下将全部平仓
			TurtlePos=0;	//海龟持仓单位数量清0
		}
		
	}
	
	PlotNumeric("DonchianHi",DonchianHi,0,Red);
	PlotNumeric("DonchianLo",DonchianLo,0,Red);
	PlotNumeric("fsDonchianHi",fsDonchianHi,0,DarkGray);
	PlotNumeric("fsDonchianLo",fsDonchianLo,0,DarkGray);
	PlotNumeric("ExitLowestPrice",ExitLowestPrice,0,Green);
	PlotNumeric("ExitHighestPrice",ExitHighestPrice,0,Green);
	 
	Commentary("TurtleStopPrice="+Text(TurtleStopPrice));
	Commentary("TurtlePos="+Text(TurtlePos));
	//Commentary("TurtleUnits="+Text(TurtleUnits));
	//Commentary("TotalEquity="+Text(TotalEquity));
	//Commentary("BarType="+Text(BarType));
	//Commentary("BarInterval="+Text(BarInterval));
	//Commentary("MarketPosition="+Text(MarketPosition));
	
	//Commentary("A_CurrentEquity="+Text(A_CurrentEquity)); 
	//Commentary("A_TotalMargin="+Text(A_TotalMargin)); 
	PlotBool("ExitAllowed", ExitAllowed);
	Commentary("RiskDegree="+Text(RiskDegree)); 
	Commentary("A_TotalFreeze="+Text(A_TotalFreeze)); 
	//Commentary("Date="+Text(Date));
	//Commentary("CurrentDate="+Text(CurrentDate));
	//Commentary("CurrentTime="+Text(CurrentTime)); 
	//Commentary("CurrentTime="+Text(CurrentTime)); 
	//Commentary("MyMinuteTime="+Text(MyMinuteTime));  
	
	
End


//------------------------------------------------------------------------
// 编译版本	GS2010.12.08
// 版权所有	TradeBlazer Software 2003－2010
// 更改声明	TradeBlazer Software保留对TradeBlazer平
//			台每一版本的TradeBlazer公式修改和重写的权利
//------------------------------------------------------------------------